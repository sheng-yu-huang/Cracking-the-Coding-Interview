Palindrome Permutation: Given a string, write a function to check if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation
is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.
EXAMPLE
Input: Tact Coa
Output: True (permutations : "taco cat" , "atco cta" , etc. )

00010000 - 1 = 00001111
00010000 & 00001111 = 0

# O(n)

boolean isPermutationOfPalindrome(String phrase) {
    int bitVector = createBitVector(phease);
    retrun bitVector==0 || checkExactlyOneBitSet(bitVector);
}
 
int createBitVector(String phrase){
    int bitVector = 0
    for(char c: phrase.toCharArray()){
        int x = getCharNumber(c);
        bitVector = toggle(bitVector, x);
    }
    return bitVector;
}

int toggle(int bitVector, int index){
    if(index<0) return bitVector;

    int mask = 1<<index;
    if((bitVector&mask) == 0){
        bitVector |= mask;
    } else {
        bitVector &= ~mask;
    }
    return bitVector;
}

boolean checkExactlyOneBitSet(int bitVector){
    return (bitVector & (bitVector-1)) == 0;
}
